{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "namePrefix": {
            "maxLength": 6,
            "type": "String",
            "metadata": {
                "description": "String used as a base for naming resources (6 alphanumeric characters or less).  A unique hash is prepended to the string for some resources, while resource-specific information is appended."
            }
        },
        "authType": {
            "allowedValues": [
                "password",
                "sshPublicKey"
            ],
            "type": "String",
            "metadata": {
                "description": "Authorization type for SSH access to VMs"
            }
        },
        "adminUsername": {
            "defaultValue": "gethadmin",
            "type": "String",
            "metadata": {
                "description": "Administrator username of each deployed VM (alphanumeric characters only)"
            }
        },
        "adminPassword": {
            "defaultValue": "",
            "type": "SecureString",
            "metadata": {
                "description": "Administrator password for each deployed VM"
            }
        },
        "adminSSHKey": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "SSH RSA public key file as a string"
            }
        },
        "restrictAccess": {
            "defaultValue": 0,
            "type": "Int",
            "metadata": {
                "description": "If 1, use specified IP address/subnet to restrict access to all endpoints.  If 0, access is open to any IP address."
            }
        },
        "ipAddressOrSubnet": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "If restrictAccess is set to 1, specify an individual IP address or IP subnet/address range here from where access to all endpoints will be allowed."
            }
        },
        "numBlockMakers": {
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 1,
            "type": "Int",
            "metadata": {
                "description": "Number of mining nodes to create for each consortium member."
            }
        },
        "numVoters": {
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 9,
            "type": "Int",
            "metadata": {
                "description": "Number of mining nodes to create for each consortium member."
            }
        },
        "numObservers": {
            "defaultValue": 0,
            "minValue": 0,
            "maxValue": 9,
            "type": "Int",
            "metadata": {
                "description": "Number of mining nodes to create for each consortium member."
            }
        },
        "storagePerformance": {
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "type": "String",
            "metadata": {
                "description": "Storage performance level for virtual machines"
            }
        },
        "vmSize": {
            "defaultValue": "Standard_D1_v2",
            "allowedValues": [],
            "type": "String",
            "metadata": {
                "description": "Size of the virtual machine used for mining nodes"
            }
        },
        "consortiumMemberId": {
            "defaultValue": 0,
            "minValue": 0,
            "maxValue": 255,
            "type": "Int",
            "metadata": {
                "description": "In a multi-member setup, each member should have a unique value to ensure they can connect"
            }
        },
        "ethereumAccountPsswd": {
            "type": "SecureString",
            "metadata": {
                "description": "Password used to secure the Ethereum accounts that will be generated"
            }
        },
        "passphrase": {
            "type": "SecureString",
            "metadata": {
                "description": "Password used to generate the private keys associated with the Ethereum accounts that are generated.  Consider a password with sufficient randomness to ensure a strong private key"
            }
        },
        "ethereumNetworkID": {
            "defaultValue": 10101010,
            "maxValue": 2147483647,
            "type": "Int",
            "metadata": {
                "description": "Private Ethereum network ID to which to connect (max 9 digit number)"
            }
        },
        "location": {
            "type": "String"
        },
        "baseUrl": {
            "defaultValue": "https://mprpdfartifactstore.azureedge.net/publicartifacts/enterprise-ethereum-alliance.eea-single-member-525df464-a8d7-4bf5-b9f4-a3be18e9ef0f-quorum-single-member-blockchain-network/Artifacts",
            "type": "String",
            "metadata": {
                "description": "The base URL for dependent assets",
                "artifactsBaseUrl": ""
            }
        }
    },
    "variables": {
        "apiVersionDeployments": "2016-09-01",
        "apiVersionPublicIPAddresses": "2016-09-01",
        "apiVersionAvailabilitySets": "2016-04-30-preview",
        "apiVersionNetworkSecurityGroups": "2016-09-01",
        "apiVersionNetworkInterfaces": "2016-09-01",
        "apiVersionVirtualMachines": "2016-04-30-preview",
        "apiVersionVirtualNetworks": "2016-09-01",
        "namingInfix": "[toLower(substring(concat(parameters('namePrefix'), uniqueString(resourceGroup().id)), 0, 9))]",
        "availabilitySetName": "[concat(variables('namingInfix'), 'quorumAvSet')]",
        "dnsName": "[variables('namingInfix')]",
        "publicIPAddressName": "[concat(variables('dnsName'), '-publicip')]",
        "loadBalancerName": "[concat(variables('namingInfix'), '-LB')]",
        "loadBalancerBackendAddressPoolName": "LoadBalancerBackend1",
        "loadBalancerInboundNatRuleNamePrefix": "Nat",
        "httpPort": 80,
        "sshPort": 22,
        "sshStartingPort": 3000,
        "adminSitePort": 3000,
        "gethRPCPort": 8545,
        "cakeShopStartingPort": 4000,
        "cakeShopPort": 4000,
        "gethIPCPort": 30303,
        "bmVMNamePrefix": "[concat(variables('namingInfix'), '-bm')]",
        "voterVMNamePrefix": "[concat(variables('namingInfix'), '-vtr')]",
        "observerVMNamePrefix": "[concat(variables('namingInfix'), '-obs')]",
        "bmNICPrefix": "nic-bm",
        "voterNICPrefix": "nic-voter",
        "observerNICPrefix": "nic-observer",
        "subnetName": "[uniqueString(concat(resourceGroup().id, concat(variables('namingInfix'), 'subnet')))]",
        "subnetPrefix": "[replace('10._.0.0/24','_', string(parameters('consortiumMemberId')))]",
        "nsgName": "[concat(variables('namingInfix'), 'nsg')]",
        "sourceAddressPrefixArray": [
            "*",
            "[parameters('ipAddressOrSubnet')]"
        ],
        "sourceAddressPrefix": "[variables('sourceAddressPrefixArray')[parameters('restrictAccess')]]",
        "subnetPropertiesArray": [
            {
                "name": "[variables('subnetName')]",
                "properties": {
                    "addressPrefix": "[variables('subnetPrefix')]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                    }
                }
            }
        ],
        "ubuntuImage": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04.0-LTS",
            "version": "latest"
        },
        "vNet": {
            "name": "[concat(variables('namingInfix'), 'vnet')]",
            "addressSpacePrefix": "[replace('10._.0.0/20', '_',string(parameters('consortiumMemberId')))]"
        },
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('vNet').name)]",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/', variables('subnetName'))]",
        "noObserversOptionArray": [
            "-dummy",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "name": "pid-fe893a26-5049-458d-b468-ff1c710b2ef3",
            "apiVersion": "2018-02-01",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('availabilitySetName')]",
            "apiVersion": "[variables('apiVersionAvailabilitySets')]",
            "location": "[parameters('location')]",
            "properties": {
                "platformUpdateDomainCount": "2",
                "platformFaultDomainCount": "2",
                "managed": "true"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "apiVersion": "[variables('apiVersionPublicIPAddresses')]",
            "location": "[parameters('location')]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[variables('dnsName')]"
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "loadBalancerLinkedTemplate",
            "apiVersion": "[variables('apiVersionDeployments')]",
            "properties": {
                "mode": "incremental",
                "templateLink": {
                    "uri": "[concat(parameters('baseUrl'), '/nested/loadBalancer.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "loadBalancerName": {
                        "value": "[variables('loadBalancerName')]"
                    },
                    "dnsHostName": {
                        "value": "[variables('namingInfix')]"
                    },
                    "loadBalancerBackendAddressPoolName": {
                        "value": "[variables('loadBalancerBackendAddressPoolName')]"
                    },
                    "loadBalancerInboundNatRuleNamePrefix": {
                        "value": "[variables('loadBalancerInboundNatRuleNamePrefix')]"
                    },
                    "frontendPort1": {
                        "value": "[variables('httpPort')]"
                    },
                    "backendPort1": {
                        "value": "[variables('adminSitePort')]"
                    },
                    "numInboundNATRules": {
                        "value": "[add(add(parameters('numVoters'), parameters('numBlockmakers')), parameters('numObservers'))]"
                    },
                    "inboundNATRuleCakeshopStartingPort": {
                        "value": "[variables('cakeShopStartingPort')]"
                    },
                    "inboundNATRuleCakeshopBackendPort": {
                        "value": "[variables('cakeShopPort')]"
                    },
                    "inboundNATRuleSSHStartingPort": {
                        "value": "[variables('sshStartingPort')]"
                    },
                    "inboundNATRuleSSHBackendPort": {
                        "value": "[variables('sshPort')]"
                    },
                    "publicIPAddressName": {
                        "value": "[variables('publicIPAddressName')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIpAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "apiVersion": "[variables('apiVersionNetworkSecurityGroups')]",
            "location": "[parameters('location')]",
            "tags": {
                "displayName": "Network Security Group"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "allow-ssh",
                        "properties": {
                            "description": "Allow SSH",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[variables('sshPort')]",
                            "sourceAddressPrefix": "[variables('sourceAddressPrefix')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-cakeshop",
                        "properties": {
                            "description": "Allow cakeshop IDE",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[concat(string(variables('cakeShopStartingPort')),'-', string(sub(add(4000, add(parameters('numBlockMakers'), add(parameters('numObservers'), parameters('numVoters')))),1)))]",
                            "sourceAddressPrefix": "[variables('sourceAddressPrefix')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 102,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-etheradmin",
                        "properties": {
                            "description": "Allow etheradmin site",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[variables('adminSitePort')]",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 103,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "block-bootnodes",
                        "properties": {
                            "description": "Block Internet Bootnodes",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[variables('gethIPCPort')]",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Deny",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('vNet').name]",
            "apiVersion": "[variables('apiVersionVirtualNetworks')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vNet').addressSpacePrefix]"
                    ]
                },
                "subnets": "[variables('subnetPropertiesArray')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "bmVMLinkedTemplate",
            "apiVersion": "[variables('apiVersionDeployments')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('baseUrl'), '/nested/VMAuth', '-', parameters('authType'), '.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiVersionVirtualMachines": {
                        "value": "[variables('apiVersionVirtualMachines')]"
                    },
                    "apiVersionNetworkInterfaces": {
                        "value": "[variables('apiVersionNetworkInterfaces')]"
                    },
                    "storagePerformance": {
                        "value": "[parameters('storagePerformance')]"
                    },
                    "loadBalancerName": {
                        "value": "[variables('loadBalancerName')]"
                    },
                    "loadBalancerBackendAddressPoolName": {
                        "value": "[variables('loadBalancerBackendAddressPoolName')]"
                    },
                    "loadBalancerInboundNatRuleNamePrefix": {
                        "value": "[variables('loadBalancerInboundNatRuleNamePrefix')]"
                    },
                    "subnetRef": {
                        "value": "[variables('subnetRef')]"
                    },
                    "vmNamePrefix": {
                        "value": "[variables('bmVMNamePrefix')]"
                    },
                    "numVMs": {
                        "value": "[parameters('numBlockMakers')]"
                    },
                    "offset": {
                        "value": 0
                    },
                    "nicPrefix": {
                        "value": "[variables('bmNICPrefix')]"
                    },
                    "availabilitySetName": {
                        "value": "[variables('availabilitySetName')]"
                    },
                    "vmSize": {
                        "value": "[parameters('vmSize')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "adminSSHKey": {
                        "value": "[parameters('adminSSHKey')]"
                    },
                    "ubuntuImage": {
                        "value": "[variables('ubuntuImage')]"
                    },
                    "namingInfix": {
                        "value": "[variables('namingInfix')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vNet').name)]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
                "loadBalancerLinkedTemplate"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "voterVMLinkedTemplate",
            "apiVersion": "[variables('apiVersionDeployments')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('baseUrl'), '/nested/VMAuth', '-', parameters('authType'), '.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiVersionVirtualMachines": {
                        "value": "[variables('apiVersionVirtualMachines')]"
                    },
                    "apiVersionNetworkInterfaces": {
                        "value": "[variables('apiVersionNetworkInterfaces')]"
                    },
                    "storagePerformance": {
                        "value": "[parameters('storagePerformance')]"
                    },
                    "loadBalancerName": {
                        "value": "[variables('loadBalancerName')]"
                    },
                    "loadBalancerBackendAddressPoolName": {
                        "value": "[variables('loadBalancerBackendAddressPoolName')]"
                    },
                    "loadBalancerInboundNatRuleNamePrefix": {
                        "value": "[variables('loadBalancerInboundNatRuleNamePrefix')]"
                    },
                    "subnetRef": {
                        "value": "[variables('subnetRef')]"
                    },
                    "vmNamePrefix": {
                        "value": "[variables('voterVMNamePrefix')]"
                    },
                    "numVMs": {
                        "value": "[parameters('numVoters')]"
                    },
                    "offset": {
                        "value": "[parameters('numBlockMakers')]"
                    },
                    "nicPrefix": {
                        "value": "[variables('voterNICPrefix')]"
                    },
                    "availabilitySetName": {
                        "value": "[variables('availabilitySetName')]"
                    },
                    "vmSize": {
                        "value": "[parameters('vmSize')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "adminSSHKey": {
                        "value": "[parameters('adminSSHKey')]"
                    },
                    "ubuntuImage": {
                        "value": "[variables('ubuntuImage')]"
                    },
                    "namingInfix": {
                        "value": "[variables('namingInfix')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vNet').name)]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
                "loadBalancerLinkedTemplate"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "observerVMLinkedTemplate",
            "apiVersion": "[variables('apiVersionDeployments')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('baseUrl'), '/nested/VMAuth', variables('noObserversOptionArray')[parameters('numObservers')], '-', parameters('authType'), '.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiVersionVirtualMachines": {
                        "value": "[variables('apiVersionVirtualMachines')]"
                    },
                    "apiVersionNetworkInterfaces": {
                        "value": "[variables('apiVersionNetworkInterfaces')]"
                    },
                    "storagePerformance": {
                        "value": "[parameters('storagePerformance')]"
                    },
                    "loadBalancerName": {
                        "value": "[variables('loadBalancerName')]"
                    },
                    "loadBalancerBackendAddressPoolName": {
                        "value": "[variables('loadBalancerBackendAddressPoolName')]"
                    },
                    "loadBalancerInboundNatRuleNamePrefix": {
                        "value": "[variables('loadBalancerInboundNatRuleNamePrefix')]"
                    },
                    "subnetRef": {
                        "value": "[variables('subnetRef')]"
                    },
                    "vmNamePrefix": {
                        "value": "[variables('observerVMNamePrefix')]"
                    },
                    "numVMs": {
                        "value": "[parameters('numObservers')]"
                    },
                    "offset": {
                        "value": "[add(parameters('numBlockMakers'), parameters('numVoters'))]"
                    },
                    "nicPrefix": {
                        "value": "[variables('observerNICPrefix')]"
                    },
                    "availabilitySetName": {
                        "value": "[variables('availabilitySetName')]"
                    },
                    "vmSize": {
                        "value": "[parameters('vmSize')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "adminSSHKey": {
                        "value": "[parameters('adminSSHKey')]"
                    },
                    "ubuntuImage": {
                        "value": "[variables('ubuntuImage')]"
                    },
                    "namingInfix": {
                        "value": "[variables('namingInfix')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vNet').name)]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
                "loadBalancerLinkedTemplate"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "vmExtensionLinkedTemplate",
            "apiVersion": "[variables('apiVersionDeployments')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/sysgain/vvivekbc/master/VMExtension.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "bmVMNamePrefix": {
                        "value": "[variables('bmVMNamePrefix')]"
                    },
                    "numBMs": {
                        "value": "[parameters('numBlockMakers')]"
                    },
                    "voterVMNamePrefix": {
                        "value": "[variables('voterVMNamePrefix')]"
                    },
                    "numVoters": {
                        "value": "[parameters('numVoters')]"
                    },
                    "observerVMNamePrefix": {
                        "value": "[variables('observerVMNamePrefix')]"
                    },
                    "numObservers": {
                        "value": "[parameters('numObservers')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "ethereumAccountPsswd": {
                        "value": "[parameters('ethereumAccountPsswd')]"
                    },
                    "passphrase": {
                        "value": "[parameters('passphrase')]"
                    },
                    "ethereumNetworkID": {
                        "value": "[parameters('ethereumNetworkID')]"
                    },
                    "gethIPCPort": {
                        "value": "[variables('gethIPCPort')]"
                    },
                    "adminSitePort": {
                        "value": "[variables('adminSitePort')]"
                    },
                    "cakeshopFqdn": {
                        "value": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
                    },
                    "cakeshopStartingPort": {
                        "value": "[variables('cakeShopStartingPort')]"
                    },
                    "artifactsLocationURL": {
                        "value": "[parameters('baseUrl')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "dependsOn": [
                "bmVMLinkedTemplate",
                "voterVMLinkedTemplate"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "vmExtensionLinkedTemplateObservers",
            "apiVersion": "[variables('apiVersionDeployments')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://github.com/sysgain/vvivekbc/blob/master/VMExtension-Observers.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "bmVMNamePrefix": {
                        "value": "[variables('bmVMNamePrefix')]"
                    },
                    "numBMs": {
                        "value": "[parameters('numBlockMakers')]"
                    },
                    "voterVMNamePrefix": {
                        "value": "[variables('voterVMNamePrefix')]"
                    },
                    "numVoters": {
                        "value": "[parameters('numVoters')]"
                    },
                    "observerVMNamePrefix": {
                        "value": "[variables('observerVMNamePrefix')]"
                    },
                    "numObservers": {
                        "value": "[parameters('numObservers')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "ethereumAccountPsswd": {
                        "value": "[parameters('ethereumAccountPsswd')]"
                    },
                    "passphrase": {
                        "value": "[parameters('passphrase')]"
                    },
                    "ethereumNetworkID": {
                        "value": "[parameters('ethereumNetworkID')]"
                    },
                    "gethIPCPort": {
                        "value": "[variables('gethIPCPort')]"
                    },
                    "adminSitePort": {
                        "value": "[variables('adminSitePort')]"
                    },
                    "cakeshopFqdn": {
                        "value": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
                    },
                    "cakeshopStartingPort": {
                        "value": "[variables('cakeShopStartingPort')]"
                    },
                    "artifactsLocationURL": {
                        "value": "[parameters('baseUrl')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "dependsOn": [
                "observerVMLinkedTemplate"
            ]
        }
    ],
    "outputs": {
        "admin-site": {
            "type": "String",
            "value": "[concat('http://', reference(variables('publicIPAddressName')).dnsSettings.fqdn)]"
        },
        "ssh-to-first-vm": {
            "type": "String",
            "value": "[concat('ssh -p ', variables('sshStartingPort'), ' ', parameters('adminUsername'), '@', reference(variables('publicIPAddressName')).dnsSettings.fqdn)]"
        }
    }
}
